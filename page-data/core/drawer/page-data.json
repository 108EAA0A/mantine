{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/drawer/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Drawer"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Usage with Portal"},{"depth":2,"value":"Position"},{"depth":2,"value":"Sizes"},{"depth":2,"value":"Control behavior"},{"depth":2,"value":"Change transition"},{"depth":2,"value":"Accessibility and usability"},{"depth":2,"value":"Component props"}],"frontmatter":{"title":"Drawer","package":"mantine-core","slug":"/core/drawer/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Drawer\",\n  \"order\": 1,\n  \"slug\": \"/core/drawer/\",\n  \"category\": \"overlay\",\n  \"description\": \"Display overlay area at any side of the screen\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"drawer\"\n  }, \"Drawer\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Drawer/Drawer.tsx\",\n    docs: \"core/Drawer.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Drawer } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(DrawerBaseDemo, {\n    mdxType: \"DrawerBaseDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage-with-portal\"\n  }, \"Usage with Portal\"), mdx(\"p\", null, \"Usually, it is a good idea to render drawer outside of current component to avoid z-index collisions.\\nTo implement this use \", mdx(GatsbyLink, {\n    to: \"/core/portal\",\n    mdxType: \"GatsbyLink\"\n  }, \"Portal\"), \" component.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useState } from 'react';\\nimport { Drawer, Portal } from '@mantine/core';\\n\\nfunction PortalDemo() {\\n  const [opened, setOpened] = useState(false);\\n\\n  return (\\n    <div style={{ position: 'relative', zIndex: 1 }}>\\n      <Portal zIndex={5}>\\n        <Drawer opened={opened} onClose={() => setOpened(false)}>\\n          Drawer is rendered at the end of document.body\\n        </Drawer>\\n      </Portal>\\n\\n      <button onClick={() => setOpened(true)}>Open drawer</button>\\n    </div>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"position\"\n  }, \"Position\"), mdx(\"p\", null, \"Drawer can be placed on left (default), top, right and bottom. Control drawer position with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Drawer position=\\\"right\\\" />\\n\")), mdx(DrawerPositionsDemo, {\n    mdxType: \"DrawerPositionsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"Control drawer size by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop. You can use predefined values (xs, sm, md, lg, xl, full)\\nor set drawer body size with any valid css value, for example, 200px, 25%, calc(100% - 100px).\\nSize controls width for left and right positions and height for top and bottom.\\nSize cannot exceed 100% of width and 100vh of height.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Drawer position=\\\"right\\\" size=\\\"xl\\\" /> // predefined xl width\\n<Drawer position=\\\"top\\\" size={200} /> // 200px height\\n<Drawer position=\\\"left\\\" size=\\\"75%\\\" /> // 75% width\\n<Drawer position=\\\"bottom\\\" size=\\\"500vh\\\" /> // 100vh height as max-height is 100vh\\n\")), mdx(DrawerSizesDemo, {\n    mdxType: \"DrawerSizesDemo\"\n  }), mdx(\"p\", null, \"You can get predefined max-width values by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"DRAWER_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { DRAWER_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'max-width'],\n    data: Object.keys(DRAWER_SIZES).map(function (size) {\n      return [size, \"\".concat(DRAWER_SIZES[size]).concat(typeof DRAWER_SIZES[size] === 'number' ? 'px' : '')];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"control-behavior\"\n  }, \"Control behavior\"), mdx(\"p\", null, \"You can change drawer behavior with props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"noOverlay\"), \" \\u2013 removes overlay\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"noFocusTrap\"), \" \\u2013 removes focus trap inside drawer body\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"noScrollLock\"), \" \\u2013 disables scroll lock\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"noCloseOnClickOutside\"), \" \\u2013 do not trigger onClose for outside clicks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"noCloseOnEscape\"), \" \\u2013 do not trigger onClose for escape key press\")), mdx(DrawerInactiveDemo, {\n    mdxType: \"DrawerInactiveDemo\"\n  }), mdx(\"p\", null, \"Try combining these props to achieve desired behavior.\\nNote that, disabling some parts will break accessibility and usability.\"), mdx(DrawerConfigurator, {\n    mdxType: \"DrawerConfigurator\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-transition\"\n  }, \"Change transition\"), mdx(\"p\", null, \"Drawer is built with \", mdx(GatsbyLink, {\n    to: \"/core/transition\",\n    mdxType: \"GatsbyLink\"\n  }, \"Transition\"), \" component.\\nTo learn more about transitions see \", mdx(GatsbyLink, {\n    to: \"/guides/transitions\",\n    mdxType: \"GatsbyLink\"\n  }, \"transitions guide\"), \".\\nYou can customize transition, timing function and duration:\"), mdx(DrawerTransitionsDemo, {\n    mdxType: \"DrawerTransitionsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"p\", null, \"By default:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When drawer is opened focus is trapped inside and document.body scroll is locked in current position\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When user clicks on overlay or presses escape drawer is closed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drawer transitions use disabled when user prefers to reduce motion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Drawer body has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-modal\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role=\\\"dialog\\\"\"), \" attributes\")), mdx(\"p\", null, \"Add \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-labelledby_attribute\"\n  }, \"aria-labelledby\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Techniques/Using_the_aria-describedby_attribute\"\n  }, \"aria-describedby\"), \" for better screen readers support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Drawer aria-labelledby=\\\"drawer-title\\\" aria-describedby=\\\"drawer-body\\\">\\n  <h1 id=\\\"drawer-title\\\">Title</h1>\\n  <div id=\\\"drawer-body\\\">Body</div>\\n</Drawer>\\n\")), mdx(\"h2\", {\n    \"id\": \"component-props\"\n  }, \"Component props\"), mdx(PropsTable, {\n    component: \"Drawer\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2a7a9408-c72c-55e4-ad8d-c8c5f67a27aa","slug":"core/Drawer","__params":{"slug":"core"}}},"staticQueryHashes":["1492094820","435193543"]}