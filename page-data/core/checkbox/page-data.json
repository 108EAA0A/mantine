{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/checkbox/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Checkbox"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Sizes"},{"depth":2,"value":"Intermediate state"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Accessibility"},{"depth":2,"value":"Component props"}],"frontmatter":{"title":"Checkbox","package":"mantine-core","slug":"/core/checkbox/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Checkbox\",\n  \"order\": 1,\n  \"slug\": \"/core/checkbox/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture boolean input from user\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"checkbox\"\n  }, \"Checkbox\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Checkbox/Checkbox.tsx\",\n    docs: \"core/Checkbox.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Checkbox } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use Checkbox to capture boolean value input from user.\\nFor better accessibility set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"label\"), \" prop, it will add associated label element.\"), mdx(CheckboxConfigurator, {\n    mdxType: \"CheckboxConfigurator\"\n  }), mdx(\"h2\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"Checkbox has 5 predefined sizes: xs, sm, md, lg, xl.\\nSize defines label font-size (from \", mdx(GatsbyLink, {\n    to: \"/pages/theming/\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme.fontSizes\"), \"), input width and height.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox size=\\\"xl\\\" /> // -> predefined xl size\\n\")), mdx(\"p\", null, \"Checkbox sizes from xs to xl:\"), mdx(CheckboxSizesDemo, {\n    mdxType: \"CheckboxSizesDemo\"\n  }), mdx(\"p\", null, \"You can get checkbox sizes by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"CHECKBOX_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { CHECKBOX_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'Width and height'],\n    data: Object.keys(CHECKBOX_SIZES).map(function (size) {\n      return [size, \"\".concat(CHECKBOX_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"intermediate-state\"\n  }, \"Intermediate state\"), mdx(\"p\", null, \"Checkbox supports intermediate state. When \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"intermediate\"), \" prop is set to true,\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"checked\"), \" prop is ignored:\"), mdx(CheckboxIntermediateDemo, {\n    mdxType: \"CheckboxIntermediateDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useState } from 'react';\\nimport { Checkbox } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [checked, setChecked] = useState(false);\\n  return (\\n    <Checkbox checked={checked} onChange={(event) => setChecked(event.currentTarget.checked)} />\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { Checkbox } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef();\\n  return <Checkbox elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use checkbox without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Checkbox label=\\\"My checkbox\\\" />; // -> ok, input and label is connected\\n<Checkbox />; // not ok, input is not labeled\\n<Checkbox aria-label=\\\"My checkbox\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")), mdx(\"h2\", {\n    \"id\": \"component-props\"\n  }, \"Component props\"), mdx(PropsTable, {\n    component: \"Checkbox\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"98416849-76fa-516f-984d-a39c22cd89ee","slug":"core/Checkbox","__params":{"slug":"core"}}},"staticQueryHashes":["1492094820","435193543"]}