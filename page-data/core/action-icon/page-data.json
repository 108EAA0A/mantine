{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/action-icon/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"ActionIcon"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Where to use"},{"depth":2,"value":"Variants"},{"depth":2,"value":"Color"},{"depth":2,"value":"Size"},{"depth":2,"value":"Radius"},{"depth":2,"value":"Compose with ElementsGroup"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Component props"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"ActionIcon","package":"mantine-core","slug":"/core/action-icon/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"ActionIcon\",\n  \"order\": 1,\n  \"slug\": \"/core/action-icon/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"actionicon\"\n  }, \"ActionIcon\"), mdx(PageHeader, {\n    source: \"mantine-core/src/ActionIcon/ActionIcon.tsx\",\n    docs: \"core/ActionIcon.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { ActionIcon } from '@mantine/core';\\n\")), mdx(ActionIconRootDemo, {\n    mdxType: \"ActionIconRootDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"You can use any React node as icon by passing it as a child to ActionIcon component.\\nNote that component \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not control icon size\"), \" and you need to specify it manually on icon component for better fit.\"), mdx(\"p\", null, \"You can use icons from any react icons library, for example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://icons.modulz.app/\"\n  }, \"radix icons\"), \" (used in mantine packages)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://feathericons.com/\"\n  }, \"feather\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://react-icons.github.io/react-icons\"\n  }, \"react-icons\"))), mdx(ActionIconBaseDemo, {\n    mdxType: \"ActionIconBaseDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"where-to-use\"\n  }, \"Where to use\"), mdx(\"p\", null, \"Use action icon to indicate secondary action, for example to close modal or toggle password visibility. Keep in mind that component has low emphasis.\"), mdx(\"p\", null, \"Password input visibility toggle example:\"), mdx(ActionIconUsageDemo, {\n    mdxType: \"ActionIconUsageDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"variants\"\n  }, \"Variants\"), mdx(\"p\", null, \"ActionIcon has 3 variants:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transparent\"), \" \\u2013 icon without background, hover and active styles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hover\"), \" (default) \\u2013 icon without background, with hover and active styles\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filled\"), \" \\u2013 icon with background, hove and active styles\")), mdx(ActionIconVariantDemo, {\n    mdxType: \"ActionIconVariantDemo\"\n  }), mdx(\"p\", null, \"By combining \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" props you can create switch/checkbox with ActionIcon.\\nMake sure to check if \", mdx(GatsbyLink, {\n    to: \"/core/switch\",\n    mdxType: \"GatsbyLink\"\n  }, \"Switch\"), \" or \", mdx(GatsbyLink, {\n    to: \"/core/checkbox\",\n    mdxType: \"GatsbyLink\"\n  }, \"Checkbox\"), \" components\\nfit your needs first as ActionIcon will be less accessible in this case.\"), mdx(ActionIconVariantToggleDemo, {\n    mdxType: \"ActionIconVariantToggleDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"color\"\n  }, \"Color\"), mdx(\"p\", null, \"You can choose any color defined in \", mdx(GatsbyLink, {\n    to: \"/pages/theming/\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme.colors\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon color=\\\"red\\\" />\\n<ActionIcon color=\\\"blue\\\" />\\n\")), mdx(ActionIconColorsDemo, {\n    mdxType: \"ActionIconColorsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Note that component \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not control icon size\"), \" and you need to specify it manually on icon component for better fit.\\nActionIcon has predefined sizes: xs, sm, md, lg, xl.\\nYou can pass size as number and it will be set as width and height in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon size=\\\"sm\\\" /> // -> predefined small size\\n<ActionIcon size={50} /> // -> { width: 50, height: 50 }\\n\")), mdx(\"p\", null, \"Sizes from xl to xs:\"), mdx(ActionIconSizesDemo, {\n    mdxType: \"ActionIconSizesDemo\"\n  }), mdx(\"p\", null, \"You can get default sizes values by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION_ICON_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { ACTION_ICON_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'Width and height'],\n    data: Object.keys(ACTION_ICON_SIZES).map(function (size) {\n      return [size, \"\".concat(ACTION_ICON_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"radius\"\n  }, \"Radius\"), mdx(\"p\", null, \"Radius has predefined values: xs, sm, md, lg, xl which are defined in \", mdx(GatsbyLink, {\n    to: \"/pages/theming/\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme.radius\"), \".\\nAlternatively you can use number to set border-radius in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<ActionIcon radius={10} /> // -> { borderRadius: 10 }\\n\")), mdx(ActionIconConfigurator, {\n    mdxType: \"ActionIconConfigurator\"\n  }), mdx(\"h2\", {\n    \"id\": \"compose-with-elementsgroup\"\n  }, \"Compose with ElementsGroup\"), mdx(\"p\", null, \"You can compose ActionIcon with any other components that support composition feature with \", mdx(GatsbyLink, {\n    to: \"/core/elements-group\",\n    mdxType: \"GatsbyLink\"\n  }, \"ElementGroup\"), \" component.\"), mdx(ActionIconGroupDemo, {\n    mdxType: \"ActionIconGroupDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get button ref by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop to ActionIcon component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { ActionIcon } from '@mantine/core';\\n\\nfunction ActionIconDemo() {\\n  const ref = useRef();\\n  return <ActionIcon elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"component-props\"\n  }, \"Component props\"), mdx(PropsTable, {\n    component: \"ActionIcon\",\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"ActionIcon renders a regular button element.\\nAs by design element does not have text content\\nmake sure to include \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" props for better accessibility.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c1a82499-df3b-5f5a-a5c6-c90c3067894c","slug":"core/ActionIcon","__params":{"slug":"core"}}},"staticQueryHashes":["435193543"]}