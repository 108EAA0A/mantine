{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/grid/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Group"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Gutter"},{"depth":2,"value":"Grow"},{"depth":2,"value":"Column offset"},{"depth":2,"value":"Multiple rows"},{"depth":2,"value":"Justify and align"},{"depth":2,"value":"Responsive columns"},{"depth":2,"value":"Change columns count"},{"depth":2,"value":"Wrap Col component"},{"depth":2,"value":"Grid component props"}],"frontmatter":{"title":"Grid","package":"mantine-core","slug":"/core/grid/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Grid\",\n  \"order\": 1,\n  \"slug\": \"/core/grid/\",\n  \"category\": \"layout\",\n  \"description\": \"Flexbox grid system with variable amount of columns\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"group\"\n  }, \"Group\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Grid/Grid.tsx\",\n    docs: \"core/Grid.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Grid, Col } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Grid component provides simple grid system based on flexbox container:\"), mdx(GridRootDemo, {\n    mdxType: \"GridRootDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"gutter\"\n  }, \"Gutter\"), mdx(\"p\", null, \"Customize spacing between columns with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"gutter\"), \" prop on Grid component.\\nUse xs, sm, md, lg, xl values to set spacing from \", mdx(GatsbyLink, {\n    to: \"/pages/theming/#spacing-radius-and-shadows\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme.spacing\"), \"\\nor number to set spacing in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Grid gutter=\\\"xl\\\" /> // -> theme.spacing.xl\\n<Grid gutter={40} /> // -> 40px\\n\")), mdx(\"h2\", {\n    \"id\": \"grow\"\n  }, \"Grow\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grow\"), \" prop on Grid component to force last row take 100% of container width:\"), mdx(GridGrowConfigurator, {\n    mdxType: \"GridGrowConfigurator\"\n  }), mdx(\"h2\", {\n    \"id\": \"column-offset\"\n  }, \"Column offset\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset\"), \" prop on Col component to create gaps in grid.\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"offset\"), \" adds left margin to target column and has the same units as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"span\"), \":\"), mdx(GridOffsetDemo, {\n    mdxType: \"GridOffsetDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"multiple-rows\"\n  }, \"Multiple rows\"), mdx(\"p\", null, \"Once children columns span and offset sum exceeds \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \" prop (defaults to 12),\\ncolumns are placed on next row:\"), mdx(GridOverflowDemo, {\n    mdxType: \"GridOverflowDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"justify-and-align\"\n  }, \"Justify and align\"), mdx(\"p\", null, \"Since grid is a flex container, you can control \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"justify-content\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"align-items\"), \" properties:\"), mdx(GridFlexConfigurator, {\n    mdxType: \"GridFlexConfigurator\"\n  }), mdx(\"h2\", {\n    \"id\": \"responsive-columns\"\n  }, \"Responsive columns\"), mdx(\"p\", null, \"Use \", mdx(GatsbyLink, {\n    to: \"/hooks/use-media-query/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-media-query\"), \" hook\\nto make columns respond to viewport changes.\\nIn this example for screens larger that 755px 3 columns will be shown and 1 column for everything less:\"), mdx(GridResponsiveDemo, {\n    mdxType: \"GridResponsiveDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-columns-count\"\n  }, \"Change columns count\"), mdx(\"p\", null, \"By default grid uses 12 columns layout, you can change it by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"columns\"), \" prop on Grid component.\\nNote that in this case columns span and offset will be calculated relative to this value.\"), mdx(\"p\", null, \"In this example first column takes 50% with 12 span (12/24), second and third take 25% (6/24):\"), mdx(GridColumnsDemo, {\n    mdxType: \"GridColumnsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"wrap-col-component\"\n  }, \"Wrap Col component\"), mdx(\"p\", null, \"Col component depends on context props from Grid component.\\nIf you want to enhance it with additional logic \\u2013 pass all props to child Col:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Example Col component wrapper, used in all demos\\nimport React from 'react';\\nimport { Col, Text, useMantineTheme } from '@mantine/core';\\n\\nfunction ColWrapper(props: React.ComponentProps<typeof Col>) {\\n  const theme = useMantineTheme();\\n  const background = theme.colorScheme === 'dark' ? theme.colors.dark[8] : theme.colors.blue[0];\\n\\n  return (\\n    <Col {...props} style={{ background, padding: theme.spacing.md, ...props.style }}>\\n      <Text\\n        color={theme.colorScheme === 'dark' ? 'gray' : 'blue'}\\n        size=\\\"xl\\\"\\n        weight={700}\\n        align=\\\"center\\\"\\n      >\\n        {props.children}\\n      </Text>\\n    </Col>\\n  );\\n}\\n\\n// Later\\n<Grid>\\n  <ColWrapper span={4}>1</ColWrapper>\\n  <ColWrapper span={4}>2</ColWrapper>\\n  <ColWrapper span={4}>3</ColWrapper>\\n</Grid>;\\n\")), mdx(\"h2\", {\n    \"id\": \"grid-component-props\"\n  }, \"Grid component props\"), mdx(PropsTable, {\n    component: \"Grid\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"c1e57efc-039e-5f46-903b-cbf75caae5d2","slug":"core/Grid","__params":{"slug":"core"}}},"staticQueryHashes":["1492094820","435193543"]}