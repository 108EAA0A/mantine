{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/getting-started/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Getting started"},{"depth":2,"value":"Installation"},{"depth":2,"value":"Dependencies"},{"depth":2,"value":"License"}],"frontmatter":{"title":"Getting started","package":"mantine-core","slug":"/core/getting-started/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Getting started\",\n  \"order\": 0,\n  \"slug\": \"/core/getting-started/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Dependencies = makeShortcode(\"Dependencies\");\nvar License = makeShortcode(\"License\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"getting-started\"\n  }, \"Getting started\"), mdx(\"p\", null, \"@mantine/core is the main package that includes all essential components\\nthat you may need to build an application.\"), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"p\", null, \"With yarn:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"yarn add react-jss @mantine/theme @mantine/hooks @mantine/core @modulz/radix-icons\\n\")), mdx(\"p\", null, \"With npm:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install react-jss @mantine/theme @mantine/hooks @mantine/core @modulz/radix-icons\\n\")), mdx(\"h2\", {\n    \"id\": \"dependencies\"\n  }, \"Dependencies\"), mdx(Dependencies, {\n    packageName: \"@mantine/core\",\n    dependencies: [{\n      name: '@mantine/theme',\n      type: 'peer'\n    }, {\n      name: '@mantine/hooks',\n      type: 'peer'\n    }, {\n      name: 'react',\n      type: 'peer'\n    }, {\n      name: 'react-dom',\n      type: 'peer'\n    }, {\n      name: 'react-jss',\n      type: 'peer',\n      why: 'CSS-in-JS library used to style all components'\n    }, {\n      name: '@modulz/radix-icons',\n      type: 'peer',\n      why: 'Icons library used in components'\n    }, {\n      name: '@charlietango/use-focus-trap',\n      type: 'dependency',\n      why: 'Hook is used to trap focus inside modals, menus and other components'\n    }, {\n      name: 'clsx',\n      type: 'dependency',\n      why: 'Utility to contruct className stings conditionally'\n    }, {\n      name: 'open-color',\n      type: 'dependency',\n      why: 'Color palette used in default theme'\n    }, {\n      name: 'react-textarea-autosize',\n      type: 'dependency',\n      why: 'Utility component used to implement autosize in Textarea'\n    }, {\n      name: 'react-transition-group',\n      type: 'dependency',\n      why: 'Used to implement transition in Transition component'\n    }, {\n      name: 'nanoid',\n      type: 'dependency',\n      why: 'Used or unique random id generation in use-id hook'\n    }],\n    mdxType: \"Dependencies\"\n  }), mdx(\"h2\", {\n    \"id\": \"license\"\n  }, \"License\"), mdx(License, {\n    mdxType: \"License\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"eee84b5c-c8ee-5cf1-b74e-f41b98ab1c6d","slug":"core/getting-started","__params":{"slug":"core"}}},"staticQueryHashes":["435193543"]}