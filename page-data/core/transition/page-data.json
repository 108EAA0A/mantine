{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/transition/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Transition"},{"depth":2,"value":"Usage"},{"depth":3,"value":"Premade transitions"},{"depth":3,"value":"Custom transitions"},{"depth":2,"value":"GroupedTransition"},{"depth":2,"value":"Component props"}],"frontmatter":{"title":"Transition","package":"mantine-core","slug":"/core/transition/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Transition\",\n  \"order\": 1,\n  \"slug\": \"/core/transition/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"transition\"\n  }, \"Transition\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Transition/Transition.tsx\",\n    docs: \"core/Transition.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Transition, GroupedTransition } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Both components are based on Transition component from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-transition-group\"\n  }, \"react-transtion-group\"), \" library.\"), mdx(\"p\", null, \"Transiton and GroupedTransition components allow you to work with enter/exit animations.\\nComponents come with premade animations and option to create your own based on CSS properties.\"), mdx(\"h3\", {\n    \"id\": \"premade-transitions\"\n  }, \"Premade transitions\"), mdx(\"p\", null, \"Mantine includes several premade transitions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"fade\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"skew-up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slide-down\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slide-up\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slide-right\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"slide-left\")), mdx(\"p\", null, \"To use one of them set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transition\"), \" property to one of these values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { Transition } from '@mantine/core';\\n\\nfunction YourModal({ opened }) {\\n  return (\\n    <Transition mounted={opened} transition=\\\"fade\\\" duration={400} timingFunction=\\\"ease\\\">\\n      {(styles) => <div style={styles}>Your modal</div>}\\n    </Transition>\\n  );\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"custom-transitions\"\n  }, \"Custom transitions\"), mdx(\"p\", null, \"You can create your own transition. Transition is an object with 4 properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"in\"), \" \\u2013 styles for mounted state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"out\"), \" \\u2013 styles for unmounted state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"common\"), \" (optional) \\u2013 styles for both mounted and unmounted states\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transitionProperty\"), \" \\u2013 properties which participate in transition\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { Transition } from '@mantine/core';\\n\\nconst scaleY = {\\n  in: { opacity: 1, transform: 'scaleY(1)' },\\n  out: { opacity: 0, transform: 'scaleY(0)' },\\n  common: { transformOrigin: 'top' },\\n  transitionProperty: 'transform, opacity',\\n};\\n\\nfunction YourModal({ opened }) {\\n  return (\\n    <Transition mounted={opened} transition={scaleY} duration={400} timingFunction=\\\"ease\\\">\\n      {(styles) => <div style={styles}>Your modal</div>}\\n    </Transition>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"groupedtransition\"\n  }, \"GroupedTransition\"), mdx(\"p\", null, \"Use GroupedTransition if you need to animate presence of more that one element at the same time but with different transitions.\\nFor example, in \", mdx(GatsbyLink, {\n    to: \"/core/modal\",\n    mdxType: \"GatsbyLink\"\n  }, \"Modal\"), \" component overlay and modal body animated differently:\\nmodal body slides from the top and overlay fades.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { GroupedTransition } from '@mantine/core';\\n\\nconst scaleY = {\\n  in: { opacity: 1, transform: 'scaleY(1)' },\\n  out: { opacity: 0, transform: 'scaleY(0)' },\\n  common: { transformOrigin: 'top' },\\n  transitionProperty: 'transform, opacity',\\n};\\n\\nfunction YourModal({ opened }) {\\n  const duration = 500;\\n\\n  return (\\n    <GroupedTransition\\n      mounted={opened}\\n      transitions={{\\n        modal: { duration, transition: 'slide-down' },\\n        overlay: { duration: duration / 2, transition: 'fade', timingFunction: 'ease' },\\n      }}\\n    >\\n      {(styles) => (\\n        <div>\\n          <div style={styles.modal}>Modal body</div>\\n          <div style={styles.overlay}>Modal overlay</div>\\n        </div>\\n      )}\\n    </GroupedTransition>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"component-props\"\n  }, \"Component props\"), mdx(PropsTable, {\n    component: \"Transition\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"dd916b59-eca2-5b2d-9cf9-6dc8f2c9df17","slug":"core/Transition","__params":{"slug":"core"}}},"staticQueryHashes":["435193543"]}