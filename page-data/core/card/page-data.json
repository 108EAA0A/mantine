{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/card/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Card"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Link overlay"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"CardsGrid"},{"depth":2,"value":"Card component props"},{"depth":2,"value":"CardsGrid component props"}],"frontmatter":{"title":"Card","package":"mantine-core","slug":"/core/card/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Card\",\n  \"order\": 1,\n  \"slug\": \"/core/card/\",\n  \"category\": \"data-display\",\n  \"description\": \"Display card with context styles for Image and Hr components\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"card\"\n  }, \"Card\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Card/Card.tsx\",\n    docs: \"core/Card.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Card, CardsGrid } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Card component is a wrapper around \", mdx(GatsbyLink, {\n    to: \"/core/paper/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Paper\"), \" component\\nwith context styles for \", mdx(GatsbyLink, {\n    to: \"/core/image/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Image\"), \" and \", mdx(GatsbyLink, {\n    to: \"/core/hr/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Hr\"), \"\\ncomponents. Combine Card component with other Mantine components to create product cards:\"), mdx(CardBaseDemo, {\n    mdxType: \"CardBaseDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"link-overlay\"\n  }, \"Link overlay\"), mdx(\"p\", null, \"Use \", mdx(GatsbyLink, {\n    to: \"/core/overlay/\",\n    mdxType: \"GatsbyLink\"\n  }, \"Overlay\"), \" component with 0 opacity\\nto create link overlay. Note that, card context styles (negative margins and border-radius) rely on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":fist-child\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \":last-child\"), \",\\nif you need preserve them, do not put overlay as first or last element.\"), mdx(CardOverlayDemo, {\n    mdxType: \"CardOverlayDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get root element ref by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { Card } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef();\\n  return <Card elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"cardsgrid\"\n  }, \"CardsGrid\"), mdx(\"p\", null, \"Use CardsGrid component to display grid of cards:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Control amount of cards per row with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cardsPerRow\"), \" prop\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gutter\"), \" with xs, sm, md (default), lg or xl value to set spacing between cards with \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.spacing\"), \" value or set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gutter\"), \" as number to set spacing in px\")), mdx(CardsGridDemo, {\n    mdxType: \"CardsGridDemo\"\n  }), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"grow\"), \" prop to make items at the last row take all space:\"), mdx(CardsGridGrowDemo, {\n    mdxType: \"CardsGridGrowDemo\"\n  }), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"breakpoints\"), \" prop to define how cards grid will be displayed at different viewport sizes.\\nIn this example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"viewport >= 1000px -> 4 cards per row\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1000px > viewport >= 750px -> 3 cards per row\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"750px > viewport >= 540px -> 2 cards per row\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"540px > viewport -> 1 card per row\")), mdx(\"p\", null, \"Try resizing browser to see cards per row change:\"), mdx(CardsGridBreakpointsDemo, {\n    mdxType: \"CardsGridBreakpointsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"card-component-props\"\n  }, \"Card component props\"), mdx(PropsTable, {\n    component: \"Card\",\n    mdxType: \"PropsTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"cardsgrid-component-props\"\n  }, \"CardsGrid component props\"), mdx(PropsTable, {\n    component: \"CardsGrid\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"64d0fccc-ce8a-5d8d-bc48-5a6e3e466c2e","slug":"core/Card","__params":{"slug":"core"}}},"staticQueryHashes":["1492094820","435193543"]}