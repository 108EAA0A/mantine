{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/badge/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Badge"},{"depth":2,"value":"Usage"},{"depth":3,"value":"Light variant"},{"depth":3,"value":"Outline variant"},{"depth":3,"value":"Filled variant"},{"depth":2,"value":"Size"},{"depth":2,"value":"Radius"},{"depth":2,"value":"Full width and overflow"},{"depth":2,"value":"Right and left sections"},{"depth":2,"value":"Custom component"},{"depth":2,"value":"Compose with ElementsGroup"},{"depth":2,"value":"Component props"}],"frontmatter":{"title":"Badge","package":"mantine-core","slug":"/core/badge/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-core\",\n  \"title\": \"Badge\",\n  \"order\": 1,\n  \"slug\": \"/core/badge/\",\n  \"category\": \"data-display\",\n  \"description\": \"Display badge, pill or tag\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar PropsTable = makeShortcode(\"PropsTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"badge\"\n  }, \"Badge\"), mdx(PageHeader, {\n    source: \"mantine-core/src/Badge/Badge.tsx\",\n    docs: \"core/Badge.mdx\",\n    \"package\": \"@mantine/core\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Badge } from '@mantine/core';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Badge has 3 variants:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"light\"), \" (default) \\u2013 light background, dark color, no border\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"outline\"), \" \\u2013 transparent background, dark color and border\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filled\"), \" \\u2013 dark background, white color, no border\")), mdx(\"p\", null, \"Default Badge color is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.primaryColor\"), \". You can choose any color defined in \", mdx(GatsbyLink, {\n    to: \"/pages/theming/\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme\"), \".\"), mdx(BadgeBaseDemo, {\n    mdxType: \"BadgeBaseDemo\"\n  }), mdx(\"h3\", {\n    \"id\": \"light-variant\"\n  }, \"Light variant\"), mdx(BadgeLightVariantDemo, {\n    mdxType: \"BadgeLightVariantDemo\"\n  }), mdx(\"h3\", {\n    \"id\": \"outline-variant\"\n  }, \"Outline variant\"), mdx(BadgeOutlineVariantDemo, {\n    mdxType: \"BadgeOutlineVariantDemo\"\n  }), mdx(\"h3\", {\n    \"id\": \"filled-variant\"\n  }, \"Filled variant\"), mdx(BadgeFilledVariantDemo, {\n    mdxType: \"BadgeFilledVariantDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Badge has predefined sizes: xs, sm, md, lg, xl.\\nSize prop controls badge height, padding and font-size.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Badge size=\\\"sm\\\" /> // -> predefined small size\\n<Badge size=\\\"xl\\\" /> // -> predefined extra large size\\n\")), mdx(\"p\", null, \"Badge sizes from xl to xs:\"), mdx(BadgeSizesDemo, {\n    mdxType: \"BadgeSizesDemo\"\n  }), mdx(\"p\", null, \"You can get predefined badge heights by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BADGE_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { BADGE_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'Badge height'],\n    data: Object.keys(BADGE_SIZES).map(function (size) {\n      return [size, \"\".concat(BADGE_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"radius\"\n  }, \"Radius\"), mdx(\"p\", null, \"xs, sm, md, lg, xl radius values are defined in \", mdx(GatsbyLink, {\n    to: \"/pages/theming/\",\n    mdxType: \"GatsbyLink\"\n  }, \"theme.radius\"), \".\\nAlternatively you can use number to set radius in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Badge radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<Badge radius={1000} /> // -> { borderRadius: 1000 }\\n\")), mdx(BadgeRadiusDemo, {\n    mdxType: \"BadgeRadiusDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"full-width-and-overflow\"\n  }, \"Full width and overflow\"), mdx(\"p\", null, \"Badge can take full width of container if you pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullWidth\"), \" prop.\\nIf badge is too large for its container, overflow content will be hidden with ellipsis.\"), mdx(BadgeFullWidthDemo, {\n    mdxType: \"BadgeFullWidthDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"right-and-left-sections\"\n  }, \"Right and left sections\"), mdx(\"p\", null, \"You can add any react node as right and left section to badge.\\nUse it to add interactive parts (for example, remove button) or additional information:\"), mdx(BadgeSectionsDemo, {\n    mdxType: \"BadgeSectionsDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-component\"\n  }, \"Custom component\"), mdx(\"p\", null, \"You can change badge root element by passing React element to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \" prop.\"), mdx(BadgeCustomComponentDemo, {\n    mdxType: \"BadgeCustomComponentDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"compose-with-elementsgroup\"\n  }, \"Compose with ElementsGroup\"), mdx(\"p\", null, \"You can compose Badge with itself and any other components that support composition feature with \", mdx(GatsbyLink, {\n    to: \"/core/elements-group/\",\n    mdxType: \"GatsbyLink\"\n  }, \"ElementGroup\"), \" component.\"), mdx(BadgeComposeDemo, {\n    mdxType: \"BadgeComposeDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"component-props\"\n  }, \"Component props\"), mdx(PropsTable, {\n    component: \"Badge\",\n    mdxType: \"PropsTable\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ae340602-2a08-5a4f-b8fb-f1c5c0068c8c","slug":"core/Badge","__params":{"slug":"core"}}},"staticQueryHashes":["1492094820","435193543"]}