{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-merged-ref/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"use-merged-ref"},{"depth":2,"value":"Definition"},{"depth":2,"value":"Usage"}],"frontmatter":{"title":"use-merged-ref","package":"mantine-hooks","slug":"/hooks/use-merged-ref/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-hooks\",\n  \"title\": \"use-merged-ref\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-merged-ref/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar GatsbyLink = makeShortcode(\"GatsbyLink\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-merged-ref\"\n  }, \"use-merged-ref\"), mdx(PageHeader, {\n    source: \"mantine-hooks/src/hooks/use-merged-ref/use-merged-ref.ts\",\n    docs: \"hooks/use-merged-ref.mdx\",\n    \"package\": \"@mantine/hooks\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"p\", null, \"Use multiple refs for one dom node\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useMergedRef } from '@mantine/hooks';\\n\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"p\", null, \"Hook accepts any amount of refs and returns function that should be passed to dom node:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useMergedRef<T = any>(\\n  ...refs: React.ForwardedRef<T>[]\\n): (node: T) => void;\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use hook when you need to use more than one ref on single dom node, for example,\\nwhen you want to use \", mdx(GatsbyLink, {\n    to: \"/hooks/use-click-outside/\",\n    mdxType: \"GatsbyLink\"\n  }, \"use-click-outside\"), \" and \", mdx(\"a\", {\n    href: \"https://www.npmjs.com/package/@charlietango/use-focus-trap\",\n    target: \"_blank\"\n  }, \"use-focus-trap\"), \" hooks and also get a ref for yourself:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React, { useRef } from 'react';\\nimport { useClickOutside, useMergedRef } from '@mantine/hooks';\\nimport useFocusTrap from '@charlietango/use-focus-trap';\\n\\nfunction Example() {\\n  const myRef = useRef();\\n  const useClickOutsideRef = useClickOutside(() => {});\\n  const focusTrapRef = useFocusTrap();\\n  const mergedRef = useMergedRef(myRef, useClickOutsideRef, focusTrapRef);\\n\\n  return <div ref={mergedRef} />;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"5ace8d0e-0910-5c93-8807-fcfb6c42ad3d","slug":"hooks/use-merged-ref","__params":{"slug":"hooks"}}},"staticQueryHashes":["435193543"]}