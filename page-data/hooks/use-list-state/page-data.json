{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-list-state/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"use-list-state"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-list-state","package":"mantine-hooks","slug":"/hooks/use-list-state/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-hooks\",\n  \"title\": \"use-list-state\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-list-state/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-list-state\"\n  }, \"use-list-state\"), mdx(PageHeader, {\n    source: \"mantine-hooks/src/hooks/use-list-state/use-list-state.ts\",\n    docs: \"hooks/use-list-state.mdx\",\n    \"package\": \"@mantine/hooks\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useListState } from '@mantine/hooks';\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-list-state hook provides an API to work work with list state:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const [values, handlers] = useListState([{ a: 1 }]);\\n\\n// add one or more items to the end of the list\\nconst append = () => handlers.append({ a: 2 });\\n// values -> [{ a: 1 }, { a: 2 }]\\n\\n// add one or more items to the start of the list\\nconst prepend = () => handlers.prepend({ a: 3 }, { a: 4 });\\n// values -> [{ a: 3 }, { a: 4 }, { a: 1 }, { a: 2 }]\\n\\n// remove items at given positions\\nconst remove = () => handlers.remove(0, 2);\\n// values -> [{ a: 4 }, { a: 2 }]\\n\\n// insert one or more items at given position\\nconst insert = () => handlers.insert(1, { a: 5 });\\n// values -> [{ a: 4 }, { a: 5 }, { a: 2 }]\\n\\n// apply function to each element of the list\\nconst apply = () => handlers.apply((item, index) => ({ a: item.a * index }));\\n// values -> [{ a: 0 }, { a: 5 }, { a: 4 }]\\n\\n// move item from one position to another\\nconst reorder = () => handlers.reorder({ from: 2, to: 0 });\\n// values -> [{ a: 4 }, { a: 0 }, { a: 5 }]\\n\\n// set entirely new state\\nconst setState = () => handlers.setState([{ a: 6 }, { a: 7 }]);\\n// values -> [{ a: 6 }, { a: 7 }]\\n\\n// set individual item at given position\\nconst setItem = () => handlers.setItem(0, { a: 8 });\\n// values -> [{ a: 8 }, { a: 7 }]\\n\\n// set item property at given position\\nconst setItemProp = () => handlers.setItemProp(1, 'a', 'new-prop');\\n// values -> [{ a: 8 }, { a: 'new-prop' }]\\n\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"p\", null, \"use-list-state takes array as single argument and returns list values and handlers to change them in tuple, similar to react use-state hook.\"), mdx(\"p\", null, \"Hook provides handlers to work with array data:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"append\"), \" \\u2013 add items to the end of the list\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"prepend\"), \" \\u2013 add items to the start of the list\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"insert\"), \" \\u2013 insert items at given index\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"remove\"), \" \\u2013 remove items at given indicies\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"reorder\"), \" \\u2013 move item from one position to another\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"apply\"), \" \\u2013 apply given function to all items in the list\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setItem\"), \" \\u2013 replace item at given index\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setItemProp\"), \" \\u2013 set item property at given index\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setState\"), \" \\u2013 set list state with react action\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useListState<T>(initialValue: T[] = []): [T[], {\\n  setState: Dispatch<SetStateAction<T[]>>;\\n  append: (...items: T[]) => void;\\n  prepend: (...items: T[]) => void;\\n  insert: (index: number, ...items: T[]) => void;\\n  apply: (fn: (item: T, index?: number) => T) => void;\\n  remove: (...indices: number[]) => void;\\n  reorder: ({ from, to }: { from: number; to: number; }) => void;\\n  setItem: (index: number, item: T) => void;\\n  setItemProp: <K extends keyof T, U extends T[K]>(index: number, prop: K, value: U) => void;\\n}]\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ab207f3c-2f64-5eb9-8e6f-6696cb1b2311","slug":"hooks/use-list-state","__params":{"slug":"hooks"}}},"staticQueryHashes":["435193543"]}