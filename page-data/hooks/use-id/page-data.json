{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-id/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"use-id"},{"depth":2,"value":"Definition"},{"depth":2,"value":"Usage"}],"frontmatter":{"title":"use-id","package":"mantine-hooks","slug":"/hooks/use-id/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-hooks\",\n  \"title\": \"use-id\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-id/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-id\"\n  }, \"use-id\"), mdx(PageHeader, {\n    source: \"mantine-hooks/src/hooks/use-id/use-id.ts\",\n    docs: \"hooks/use-id.mdx\",\n    \"package\": \"@mantine/hooks\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"p\", null, \"use-id hook generates random id that persists across renders.\\nUse it to bind input elements to labels.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useId } from '@mantine/hooks';\\n\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"p\", null, \"use-id hook accepts two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" \\u2013 string value that is returned by default\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"generateId\"), \" \\u2013 function that is used to generate random id, defaults to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.npmjs.com/package/nanoid\"\n  }, \"nanoid\"))), mdx(\"p\", null, \"Hook returns string value that is either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" (if first argument is passed) or random id generated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateId\"), \" function.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useId(\\n  id: string,\\n  generateId: (size: number) => string = nanoid\\n): string\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-id is usually used to bind input elements to labels.\\nGenerated random id is saved to refand will not change unless component is unmounted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import React from 'react';\\nimport { useId } from '@mantine/hooks';\\n\\nfunction Input({ id }) {\\n  const uuid = useId(id);\\n\\n  return (\\n    <>\\n      <label htmlFor={uuid}>Input label</label>\\n      <input type=\\\"text\\\" id={uuid} />\\n    </>\\n  );\\n}\\n\\n// input and label will have id 'my-id'\\nconst withId = <Input id=\\\"my-id\\\" />;\\n\\n// input and label will have random id 'mantine-fZMoF'\\nconst wihtoutId = <Input />;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"7f4f0edf-c624-5d46-8568-b6687f56b007","slug":"hooks/use-id","__params":{"slug":"hooks"}}},"staticQueryHashes":["435193543"]}