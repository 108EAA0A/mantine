{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-click-outside/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"use-click-outside"},{"depth":2,"value":"API"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Change events"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Definition"},{"depth":3,"value":"Ref type"}],"frontmatter":{"title":"use-click-outside","package":"mantine-hooks","slug":"/hooks/use-click-outside/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-hooks\",\n  \"title\": \"use-click-outside\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-click-outside/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-click-outside\"\n  }, \"use-click-outside\"), mdx(PageHeader, {\n    source: \"mantine-hooks/src/use-click-outside/use-click-outside.ts\",\n    docs: \"hooks/use-click-outside.mdx\",\n    \"package\": \"@mantine/hooks\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"p\", null, \"use-click-outside allows detection of clicks outside of specified element. It is usually used with modals\\nand dropdowns to close overlay when user clicks outside.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useClickOutside } from '@mantine/hooks';\\n\")), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"use-click-outside hook accepts 2 arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"handler\"), \" \\u2013 function that will be called on outside click\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"events\"), \" \\u2013 optional list of events that indicate outside click\")), mdx(\"p\", null, \"Hook returns React ref object that should be passed to element on which outside clicks should be captured.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useClickOutside } from '@mantine/hooks';\\n\\nfunction Example() {\\n  const handleClickOutside = () => console.log('Clicked outside of div');\\n  const ref = useClickOutside(handleClickOutside);\\n  return <div ref={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(UseClickOutsideDemo, {\n    mdxType: \"UseClickOutsideDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-events\"\n  }, \"Change events\"), mdx(\"p\", null, \"By default use-click-outside listens to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mousedown\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"touchstart\"), \" events,\\nyou can change these events by passing an array of events as second argument:\"), mdx(UseClickOutsideDemo, {\n    events: ['mouseup', 'touchend'],\n    mdxType: \"UseClickOutsideDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useClickOutside<T extends HTMLElement = any>(\\n  handler: () => void,\\n  events: string[] = ['mousedown', 'touchstart']\\n): React.MutableRefObject<T>;\\n\")), mdx(\"h3\", {\n    \"id\": \"ref-type\"\n  }, \"Ref type\"), mdx(\"p\", null, \"By default use-click-outside returns ref object with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"React.MutableRefObject<any>\"), \" type\\nas ref type does not matter in almost all cases. You can specify ref type by passing a type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const ref = useClickOutside<HTMLDivElement>(onClickOutside);\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"67029af8-d955-54b8-86fb-db04fd6c0ec3","slug":"hooks/use-click-outside","__params":{"slug":"hooks"}}},"staticQueryHashes":["1492094820","435193543"]}