{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-form/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"use-form"},{"depth":2,"value":"Basic example"},{"depth":2,"value":"Basic usage"},{"depth":2,"value":"Authentication form example"},{"depth":2,"value":"TypeScript integration"}],"frontmatter":{"title":"use-form","package":"mantine-hooks","slug":"/hooks/use-form/"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"package\": \"mantine-hooks\",\n  \"title\": \"use-form\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-form/\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar PageHeader = makeShortcode(\"PageHeader\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"use-form\"\n  }, \"use-form\"), mdx(PageHeader, {\n    source: \"mantine-hooks/src/hooks/use-form/use-form.ts\",\n    docs: \"hooks/use-id.mdx\",\n    \"package\": \"@mantine/hooks\",\n    mdxType: \"PageHeader\"\n  }), mdx(\"p\", null, \"use-form provides bare minimum api to manage simple forms.\\nIt includes handlers to set and validate values.\\nHook does not depend on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"@mantine/core\"), \" inputs and does not work with dom.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useForm } from '@mantine/hooks';\\n\")), mdx(\"h2\", {\n    \"id\": \"basic-example\"\n  }, \"Basic example\"), mdx(UseFormValidationDemo, {\n    mdxType: \"UseFormValidationDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"basic-usage\"\n  }, \"Basic usage\"), mdx(\"p\", null, \"Initialize form with initial values and optional validation rules. If you use TypeScript these initial values will determine form values types.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const form = useForm({\\n  // initial values are required\\n  initiaValues: {\\n    email: '',\\n    termsOfService: false,\\n  },\\n\\n  // validation rules are optional, add them if validation is required\\n  validationRules: {\\n    email: (value) => /^\\\\S+@\\\\S+$/.test(value),\\n  },\\n});\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"form\"), \" object contains these values:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"values\"), \" \\u2013 fields values with the same shape as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialValues\"), \" passed to useForm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"errors\"), \" \\u2013 object of booleans, indicates if field has validation error, has the same shape as \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"validationRules\"), \" passed to useForm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setFieldValue\"), \" \\u2013 handler to set field value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setValues\"), \" \\u2013 handler to set all form values\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"reset\"), \" \\u2013 handler to reset form values to initialValues and set all errors to false\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"validateField\"), \" \\u2013 handler to validate single field\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"setFieldError\"), \" \\u2013 handler to set single field error\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"validate\"), \" \\u2013 handler to validate all fields with given \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"validationRules\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"onSubmit\"), \" \\u2013 wrapper function for form onSubmit event\")), mdx(\"h2\", {\n    \"id\": \"authentication-form-example\"\n  }, \"Authentication form example\"), mdx(UseFormComplexDemo, {\n    mdxType: \"UseFormComplexDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"typescript-integration\"\n  }, \"TypeScript integration\"), mdx(\"p\", null, \"use-form will use values types from initialValues, usually its better to initialize form with these placeholder values.\\nIf it is not possible you can provide values type with generic:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const form = useForm<{ name?: string; termsOfService?: boolean }>({\\n  initialValues: {},\\n});\\n\\n// later\\nform.setValues({ name: 'name', termsOfService: false });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"07dcbbe3-a961-53f2-b826-0542bb888954","slug":"hooks/use-form","__params":{"slug":"hooks"}}},"staticQueryHashes":["435193543"]}